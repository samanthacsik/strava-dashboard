---
title: "Data Viz Testing"
format: html
---

A space to build some data viz before making them interactive

### Setup

```{r}
# load packages
library(tidyverse)
library(lubridate)
library(plotly)


# import data
acts <- readRDS("strava_dashboard/data/strava_acts_2022-12-27.rds")
```

### Plot theme

```{r}
mytheme <- theme_light() +
  theme(text = element_text(family = "Avenir"), # chosen from Font Book app on my Mac
        axis.text = element_text(color = "black", size = 12),
        axis.title = element_text(size = 14, face = "bold"),
        legend.title = element_text(size = 14, face = "bold"),
        legend.text = element_text(size = 13),
        panel.border = element_rect(colour = "black", fill = NA, size = 0.7),
        plot.caption = element_text(size = 10, hjust = 0))

mycolors <- scale_color_manual(name = "Sport", values = c("Hike" = "#b35702", "Bike" = "#744082", "Walk" = "#366643"))

hike_color <- "#b35702"
bike_color <- "#744082"
walk_color <- "#366643"
```

### Filter by `sport_type`
```{r}
hikes <- acts |> filter(sport_type == "Hike")
bikes <- acts |> filter(sport_type == "Ride")
walks <- acts |> filter(sport_type == "Walk")
```

### Cumulative miles by activity over specified time range

```{r}
totalHikes <- length(hikes$name)
totalRides <- length(bikes$name)
totalWalks <- length(walks$name)
```

### Filter date range
```{r}
filtered_dates <- acts |> 
  filter(start_date_local > "2021-07-27" & start_date_local < "2022-03-10")
```

### Histogram of activity lengths by sport

-   have buttons that filter by sport_type

```{r}
ggplot(acts, mapping = aes(x = total_miles)) + 
  geom_histogram(binwidth = 3) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(x = "Total Miles",
       y = "Number of recorded activities") +
  mytheme

ggplot(acts, mapping = aes(x = elevation_gain_ft)) + 
  geom_histogram(binwidth = 150) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(x = "Total Elevation Gain (ft)",
       y = "Number of recorded activities") +
  mytheme
```


### Elevation ~ Distance 
- select activity
```{r}
elev_dist <- ggplot(acts, aes(x = total_miles, y = elevation_gain_ft, color = sport_type, shape = sport_type, label = name)) +
  #geom_point(size = 3.2) +
  geom_point(alpha = 0.8, size = 4) +
  #facet_wrap(~sport_type) +
  labs(x = "Total Distance Traveled (miles)",
       y = "Total Elevation Gain (feet)") +
  scale_color_manual(name = "Sport", 
                     values = c(hike_color, bike_color, walk_color)) +
  scale_shape_manual(name = "Sport",
                     values = c(15, 16, 17)) +
   geom_smooth(method = "lm", se = FALSE) +
  #scale_y_continuous(breaks = scales::pretty_breaks(n = 3)) +
  mytheme

# elev_dist
# 
# ggplotly(elev_dist,
#          tooltip = c("name", "total_miles", "elevation_gain_ft", "moving_time_sec"))
```

### Elevation & Distance histograms
```{r}
# elevation
ggplot(acts, aes(x = elevation_gain_ft, fill = sport_type_alt)) +
  geom_histogram() +
  scale_x_continuous(expand = c(0, 0), breaks = scales::pretty_breaks(n = 8)) +
  scale_y_continuous(expand = c(0, 0), breaks = scales::pretty_breaks(n = 8)) +
  labs(x = "Total Elevation Gain (ft)",
       y = "Count") +
  scale_fill_manual(name = "Sport", values = c("Hike" = "#b35702", "Bike" = "#744082", "Walk" = "#366643")) +
  mytheme

# distance
ggplot(acts, aes(x = total_miles, fill = sport_type_alt)) +
  geom_histogram() +
  scale_x_continuous(expand = c(0, 0), breaks = scales::pretty_breaks(n = 8)) +
  scale_y_continuous(expand = c(0, 0), breaks = scales::pretty_breaks(n = 5)) +
  labs(x = "Total Distance (miles)",
       y = "Count") +
  scale_fill_manual(name = "Sport", values = c("Hike" = "#b35702", "Bike" = "#744082", "Walk" = "#366643")) +
  mytheme
```

### Elevation & Distance Summary Stats
```{r}
summary_stats <- acts |> 
  summarize(
    `Total # of Activities` = nrow(name),
    `Min Distance Traveled (miles)` = min(total_miles),
    `Avg Distance Traveled (miles)` = mean(total_miles),
    `Max Distance Traveled (miles)` = max(total_miles),
    `Aggregated Distance Traveled (miles)` = sum(total_miles),
    `Min Elevation Gain (ft)` = min(elevation_gain_ft),
    `Avg Elevation Gain (ft)` = mean(elevation_gain_ft),
    `Max Elevation Gain (ft)` = max(elevation_gain_ft),
    `Aggregated Elevation Gain (ft)` = sum(elevation_gain_ft)
  )

summary_stats

hikes_test <- acts |> 
  filter(sport_type == "Hike") |> 
  nrow()
```

## filter for distance
```{r}
distance <- acts |> 
  filter(total_miles >= 10 & total_miles <= 15)
```

### Number of activities by week
- select activity
- select year
- double slider to show date range
```{r}
# wrangle
hike_by_week <- acts |> 
  # filter(sport_type == "Hike") |> 
  group_by(sport_type, year, week_number) |> 
  summarize(total_miles_by_week = sum(total_miles)) |> 
  filter(year == "2021")

# TODO: add rows of 0 miles traveled for missing weeks

ggplot(hike_by_week, aes(x = as.numeric(week_number), y = total_miles_by_week, color = sport_type)) +
  geom_line() + 
  geom_point() + 
  labs(x = "Week",
       y = "Total Distance") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 5)) +
  mytheme +
  mycolors
```

### Hikes by month

```{r}
# wrangle
hike_by_month <- acts |> 
  # filter(sport_type == "Hike") |> 
  group_by(sport_type_alt, year, month) |> 
  summarize(total_miles_by_month= sum(total_miles)) |> 
  filter(year == "2021")

ggplot(hike_by_month, aes(x = as.numeric(month), y = total_miles_by_month, color = sport_type_alt)) +
  geom_line() + 
  geom_point() + 
  labs(x = NULL,
       y = "Total Distance") +
  scale_x_discrete(limits = c(month.abb)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6)) +
  scale_color_manual(name = "Sport", values = c("Hike" = "#b35702", "Bike" = "#744082", "Walk" = "#366643")) +
  mytheme +
  theme(axis.text.x = element_text(angle = 45, hjust = 0.9))

```

### Cluster Analysis (statquest: https://www.youtube.com/watch?v=4b5d3muPQmA)

- Notes on scaling: 

    - Re: PCAs: "scaling (aka rescale so that all variables follow z-distribution) is advisable when you have variables of different units. If youhave original data with very different variances, those with much larger variances will disproportionately load PCAs "
    
- Notes (more generally):

- K-means clustering tries to put the data into the number of clusters you tell it to
- Hierarchical clustering tells you, pairwise, what two things are most similar

```{r}
library(factoextra)
library(NbClust)
#library(cluster)

# simplify data
hikes_cluster <- acts |> 
  filter(sport_type_alt == "Hike") |> 
  select(name, total_miles, elevation_gain_ft, avg_speed_mi_hr, max_speed_mi_hr,  moving_time_sec, elapsed_time_sec, elev_high_ft)

# scale it 
hikes_scaled <- as.data.frame(scale(hikes_cluster[2:8])) # was 2:8

# Update to add rownames (activity name)
rownames(hikes_scaled) <- hikes_cluster$name

# estimate clusters
NbClust(hikes_scaled, min.nc = 2, max.nc = 10, method = "kmeans") # 2 or 9 when just dist & elev included
# fviz_nbclust(hikes_scaled, kmeans, method = "silhouette") # 2
# fviz_nbclust(hikes_scaled, kmeans, method = "wss") # ?
# fviz_nbclust(hikes_scaled, kmeans, method = "gap_stat") # 5

# calculate clusters
kmeans <- kmeans(hikes_scaled[, 1:2], centers = 9, nstart = 25)  # was 1:7

kmeans$size
kmeans$centers
kmeans$cluster

# Bind the cluster number to the original data
hikes_cl <- data.frame(hikes_scaled, cluster_no = factor(kmeans$cluster))

ggplot(hikes_cl) +
  geom_point(aes(x = total_miles,
                 y = elevation_gain_ft,
                 color = cluster_no)) +
  scale_color_brewer(palette = "Set2")

fviz_cluster(kmeans, data = hikes_cl)  +
  scale_x_continuous(name = "Scaled Total Distance (miles)") +
  scale_y_continuous(name = "Scaled Total Elevation (ft)") +
  scale_color_viridis(option = "cividis", discrete = T) +
  scale_fill_viridis(option = "cividis", discrete = T) +
  theme_minimal()
# -----------------------------------------------------------------------------------------------


hikes_cluster <- acts |> 
  filter(sport_type_alt == "Hike") |> 
  select(name, total_miles, elevation_gain_ft, avg_speed_mi_hr, max_speed_mi_hr,  moving_time_sec, elapsed_time_sec, elev_high_ft)

# estimate number of clusters
# number_est <- NbClust(hikes_cluster[2:8], min.nc = 2, max.nc = 10, method = "kmeans")

# names <- acts |>
#   filter(sport_type_alt == "Hike") |> 
#   select(name)

# scale 
scaled_hikes_cluster <- scale(hikes_cluster[,2:8])

# estimate clusters
number_est_scaled<- NbClust(scaled_hikes_cluster, min.nc = 2, max.nc = 10, method = "kmeans")
# scaled_names <- cbind(names, scaled_hikes_cluster)
fviz_nbclust(scaled_hikes_cluster, kmeans, method = "silhouette") # finding optimal number of clusters

distance <- get_dist(scaled_hikes_cluster)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))







num_clusters_est <- NbClust()
```

