---
title: "leaflet_map"
format: html
editor_options: 
  chunk_output_type: console
---

## Load packages

```{r}
#..........................load packages.........................
library(rStrava) # devtools::install_github('fawda123/rStrava')
library(tidyverse)
library(leaflet)
library(googleway)
library(htmlwidgets)
library(htmltools)
```

## Import data & prep (data scraped/wrangled in `R/scrape_strava.Rmd`)

```{r}

#............load data (wrangled in scrape_strava.Rmd)...........
acts <- readRDS("strava_dashboard/data/strava_acts_2024-09-05.rds")

#...................create subsets by activity...................
hike_data <- acts %>% filter(sport_type == "Hike")
ride_data <- acts %>% filter(sport_type %in% c("Ride", "GravelRide"))
walk_data <- acts %>% filter(sport_type == "Walk")
```

## Create base map & add icons and heatmap legend

```{r}
#........................make custom icons.......................
# activity_icons <- iconList(
#   "Hike" = makeIcon(iconUrl = "media/hiker.png", iconWidth = 20, iconHeight = 20),
#   "Ride" = makeIcon(iconUrl = "media/bike.png", iconWidth = 20, iconHeight = 20),
#   "Walk" = makeIcon(iconUrl = "media/walk.png", iconWidth = 20, iconHeight = 20)
# )

hiker_icon_custom <- makeIcon(
  iconUrl = "R/media/hiker.png",
  iconWidth = 20, iconHeight = 20
)

bike_icon_custom <- makeIcon(
  iconUrl = "R/media/bike.png",
  iconWidth = 22, iconHeight = 25
)

walk_icon_custom <- makeIcon(
  iconUrl = "R/media/walker.png",
  iconWidth = 13, iconHeight = 18
)

#........................create base map.........................
map <- leaflet() %>% 
  
  # add tiles
  addProviderTiles(providers$Esri.WorldTerrain, group = "ESRI Terrain",
                   options = providerTileOptions(maxZoom = 100)) |> 
  # addProviderTiles(providers$Esri.WorldImagery, group = "ESRI World Imagery") %>% 
  # addProviderTiles("Esri.WorldTerrain", 
  #                  options = providerTileOptions(maxNativeZoom = 19, maxZoom = 100)) %>%
  
  # add miniMap (corner)
  addMiniMap(toggleDisplay = TRUE) |>
  
  # set view over Santa Barbara 
  setView(lng = -119.753042, lat = 34.484782, zoom = 10) |> 
  
  # add clickable hiker markers with info about each hike
  addMarkers(data = hike_data, icon = hiker_icon_custom, 
             #clusterOptions = markerClusterOptions(), clusterId = "hikeCluster",
             group = "Display Hike Icons", 
             lng = ~jitter(lng, factor = 0.01), lat = ~jitter(lat, factor = 0.01),
             popup = paste("Hike Title:", hike_data$name, "<br>",
                           "Distance (miles):", hike_data$total_miles, "<br>",
                           "Elevation gain (ft):", hike_data$elevation_gain_ft)) |>

  # add clickable bike markers with info about each ride 
  addMarkers(data = ride_data, icon = bike_icon_custom, 
             #clusterOptions = markerClusterOptions(), clusterId = "bikeCluster",
             group = "Display Bike Ride Icons",
             lng = ~jitter(lng, factor = 0.01), lat = ~jitter(lat, factor = 0.01),
             popup = paste("Ride Title:", ride_data$name, "<br>",
                           "Distance (miles):", ride_data$total_miles, "<br>",
                           "Elevation gain (ft):", ride_data$elevation_gain_ft)) |>

  # add clickable walker markers with info about each  walk
  addMarkers(data = walk_data, icon = walk_icon_custom, 
             #clusterOptions = markerClusterOptions(), clusterId = "walkCluster",
             group = "Display Walk Icons",
             lng = ~jitter(lng, factor = 0.01), lat = ~jitter(lat, factor = 0.01),
             # clusterOptions = markerClusterOptions(),
             popup = paste("Walk Title:", walk_data$name, "<br>",
                           "Distance (miles):", walk_data$total_miles, "<br>",
                           "Elevation gain (ft):", walk_data$elevation_gain_ft)) |>

  # allow for toggling makers on/off
  addLayersControl(
    # baseGroups = c("ESRI Terrain", "ESRI World Imagery"),
    overlayGroups = c("Display Hike Icons", "Display Bike Ride Icons", "Display Walk Icons"),
    options = layersControlOptions(collapsed = TRUE)
  ) |>
  
  # hide all three groups icons by default
  hideGroup(c("Display Hike Icons", "Display Bike Ride Icons", "Display Walk Icons")) |> 
  
  # add heatmap legend
  addLegend(colors = c("#b35702", "#744082", "#366643"), # "#DF0101", "#070A8D", "#0F9020"; ; "#b35702", "#3D0C02", "#114C54"
            labels = c("Hike", "Ride", "Walk"), 
            position = "bottomleft") |> 
  
  # add reset map button
  leaflet.extras::addResetMapButton()


map
```

## Loop through `my_acts` and convert Google Polylines to dataframe of lat/lon; add color-coded activities to map

```{r}
#....................get unique activity ids.....................
unique_acts_ids <- unique(acts$id)

#.............iterate over activities and add to map.............
for (i in unique_acts_ids) {
  
  # 1) get activity
  activity <- filter(acts, id == i)
  
  # 2) decode polyline
  coords <- googleway::decode_pl(activity$map.summary_polyline)
  
  #3) plot activity trace on basemap; color-code according to activity type
  if (activity$sport_type %in% c("Ride", "GravelRide")) {
    map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
                      color = "#744082", opacity = 2/4, weight = 2) #070A8D (tried cb-friendly; not great on map though #3D0C02)
  } else if (activity$sport_type == "Hike") { 
    map <- addPolylines(map, lng = coords$lon, lat = coords$lat,
                      color = "#b35702", opacity = 2/4, weight = 2) #DF0101 #b35702
  } else if (activity$sport_type == "Walk") {
   map  <- addPolylines(map, lng = coords$lon, lat = coords$lat,
                      color = "#366643", opacity = 2/4, weight = 2) #0F9020  (tried cb-friendly; not graet on map though #114C54)
  }
   
}

#............................print map...........................
map

#............................save map............................
# saveWidget(map,
#            file = "outputs/leaflet_2024-09-05.html",
#            selfcontained = TRUE)
```
